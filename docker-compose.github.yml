version: '3.8'

# =====================================
# NEON MURER CMS - GITHUB DEPLOYMENT
# =====================================
# Komplettes System direkt von GitHub
# Port 3835, keine lokalen Builds nÃ¶tig

services:
  # =====================================
  # MAIN APPLICATION
  # =====================================
  app:
    image: ghcr.io/crypticbae/neon-murer-cms:latest
    container_name: neon-murer-cms
    ports:
      - "3835:3835"
    environment:
      - NODE_ENV=production
      - PORT=3835
      - DATABASE_URL=postgresql://neon_user:neon_secure_password_2024@db:5432/neon_murer_cms
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=xgI2MNdFDPbViz5IPEqBp/8IYqgzNnM0tXfVDnq+r5szkS6Qxdy1r/oJoKYLzKuL
      - ADMIN_EMAIL=admin@neonmurer.ch
      - ADMIN_PASSWORD=admin123
      - ADMIN_NAME=Administrator
      - FRONTEND_URL=http://localhost:3835
      - ALLOWED_ORIGINS=http://localhost:3835,http://127.0.0.1:3835
      - BCRYPT_ROUNDS=12
      - MAX_FILE_SIZE=50mb
      - ANALYTICS_ENABLED=true
      - LOG_LEVEL=info
      - LOG_TO_FILE=true
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - AUTH_RATE_LIMIT_MAX=5
      - HEALTH_CHECK_ENABLED=true
      - METRICS_ENABLED=true
      - HTTPS_ENABLED=false
      - UPLOAD_DIR=/app/uploads
      - MAX_JSON_SIZE=10mb
      - MAX_URL_ENCODED_SIZE=10mb
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_content:/app/content
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_backups:/app/backups
    networks:
      - neon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3835/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =====================================
  # POSTGRESQL DATABASE
  # =====================================
  db:
    image: postgres:15-alpine
    container_name: neon-murer-db
    environment:
      POSTGRES_DB: neon_murer_cms
      POSTGRES_USER: neon_user
      POSTGRES_PASSWORD: neon_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - db_backups:/backups
    networks:
      - neon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neon_user -d neon_murer_cms"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=16MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # =====================================
  # REDIS CACHE
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: neon-murer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - neon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1 
      --save 300 10 
      --save 60 10000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # =====================================
  # NGINX REVERSE PROXY & STATIC FILES
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: neon-murer-nginx
    ports:
      - "80:80"
    volumes:
      - app_content:/usr/share/nginx/html/content:ro
      - app_uploads:/usr/share/nginx/html/uploads:ro
    depends_on:
      - app
    networks:
      - neon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      /bin/sh -c "
      cat > /etc/nginx/nginx.conf << 'EOF'
      events {
          worker_connections 1024;
      }
      http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          sendfile on;
          keepalive_timeout 65;
          gzip on;
          gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
          
          upstream app {
              server app:3835;
          }
          
          server {
              listen 80;
              server_name localhost;
              
              # Health check endpoint
              location /health {
                  access_log off;
                  return 200 'OK';
                  add_header Content-Type text/plain;
              }
              
              # Static content files
              location /content/ {
                  alias /usr/share/nginx/html/content/;
                  expires 30d;
                  add_header Cache-Control 'public, immutable';
                  add_header X-Content-Type-Options nosniff;
              }
              
              # Upload files
              location /uploads/ {
                  alias /usr/share/nginx/html/uploads/;
                  expires 7d;
                  add_header Cache-Control 'public';
                  add_header X-Content-Type-Options nosniff;
              }
              
              # Proxy all other requests to app
              location / {
                  proxy_pass http://app;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
          }
      }
      EOF
      nginx -g 'daemon off;'
      "
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # =====================================
  # DATABASE INITIALIZATION
  # =====================================
  db-init:
    image: ghcr.io/crypticbae/neon-murer-cms:latest
    container_name: neon-murer-init
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://neon_user:neon_secure_password_2024@db:5432/neon_murer_cms
      - ADMIN_EMAIL=admin@neonmurer.ch
      - ADMIN_PASSWORD=admin123
      - ADMIN_NAME=Administrator
      - JWT_SECRET=xgI2MNdFDPbViz5IPEqBp/8IYqgzNnM0tXfVDnq+r5szkS6Qxdy1r/oJoKYLzKuL
    depends_on:
      db:
        condition: service_healthy
    networks:
      - neon-network
    restart: "no"
    command: >
      /bin/sh -c "
      echo 'Waiting for database to be ready...'
      sleep 30
      echo 'Running Prisma migrations...'
      npx prisma migrate deploy
      echo 'Generating Prisma client...'
      npx prisma generate
      echo 'Seeding database...'
      npm run seed
      echo 'Database initialization completed!'
      "

  # =====================================
  # AUTOMATED BACKUP SERVICE
  # =====================================
  backup:
    image: postgres:15-alpine
    container_name: neon-murer-backup
    environment:
      PGPASSWORD: neon_secure_password_2024
    volumes:
      - db_backups:/backups
    depends_on:
      - db
    networks:
      - neon-network
    restart: unless-stopped
    command: >
      /bin/sh -c "
      while true; do
        echo 'Creating database backup...'
        BACKUP_FILE=/backups/backup_\$(date +%Y%m%d_%H%M%S).sql
        pg_dump -h db -U neon_user -d neon_murer_cms > \$BACKUP_FILE
        echo 'Backup created: \$BACKUP_FILE'
        
        # Keep only last 30 backups
        cd /backups && ls -t *.sql | tail -n +31 | xargs rm -f 2>/dev/null || true
        
        # Sleep for 24 hours (86400 seconds)
        sleep 86400
      done
      "
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # =====================================
  # HEALTH MONITORING SERVICE
  # =====================================
  monitor:
    image: alpine:latest
    container_name: neon-murer-monitor
    depends_on:
      - app
      - db
      - redis
    networks:
      - neon-network
    restart: unless-stopped
    command: >
      /bin/sh -c "
      apk add --no-cache curl
      while true; do
        echo '\$(date): Running health checks...'
        
        # Check app health
        if ! curl -f http://app:3835/api/health >/dev/null 2>&1; then
          echo '\$(date): WARNING - App health check failed!'
        else
          echo '\$(date): App health check passed'
        fi
        
        # Check Redis
        if ! nc -z redis 6379 >/dev/null 2>&1; then
          echo '\$(date): WARNING - Redis not responding!'
        else
          echo '\$(date): Redis health check passed'
        fi
        
        # Sleep for 5 minutes
        sleep 300
      done
      "
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

# =====================================
# NETWORKS
# =====================================
networks:
  neon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# =====================================
# PERSISTENT VOLUMES
# =====================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_content:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  app_backups:
    driver: local
  db_backups:
    driver: local
